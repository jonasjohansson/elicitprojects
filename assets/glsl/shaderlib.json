{"copy.frag":"uniform sampler2D tDiffuse; uniform float opacity;  varying vec2 vUv;  void main() {  vec4 texel = texture2D( tDiffuse, vUv ); gl_FragColor = opacity * texel;  }","particle.frag":" uniform float opacity;   varying float vVisible; varying vec3 vColor;  void main () {     if ( vVisible < 1.0 ) discard;   gl_FragColor = vec4( vColor, opacity ); }","particle.vert":"attribute float visible;  varying float vVisible; varying vec3 vColor;  uniform float time;  void main () {   vVisible = visible; vColor = color;  vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );    gl_PointSize = 1.0;  gl_Position = projectionMatrix * mvPosition; }","point.frag":"varying float vOpacity;  void main () {  if ( vOpacity < .01 ) discard;  gl_FragColor = vec4( 1.0, 1.0, 1.0, vOpacity ); }","point.vert":"attribute float opT; attribute float opT2;  varying float vOpacity;  uniform float progress; uniform float time;  void main () {  vec3 pos = position;  pos.x += .15 * sin( time + pos.y + opT ); pos.y += .15 * sin( time + pos.x + opT2 ); pos.z = -mod( progress, opT ) * 300.0;  vec4 mvPosition = modelViewMatrix * vec4( pos, 1.0 );  float s = opT; float s2 = opT2;  if ( progress < opT ) vOpacity = 0.0; else if ( progress < opT + .2 ) vOpacity = .9 * ( progress - opT )/.2; else if ( progress < opT2 ) vOpacity = .9; else if ( progress < opT2 + .1 ) vOpacity = .9 - .9 * ( progress - opT2 )/.1; else vOpacity = 0.0;  gl_PointSize = 1.0; gl_Position = projectionMatrix * mvPosition; }","rgb.frag":"uniform sampler2D tDiffuse; uniform float amount; uniform float angle;  varying vec2 vUv;  void main() {  vec2 offset = amount * vec2( cos(angle), sin(angle)); vec4 cr = texture2D(tDiffuse, vUv + offset); vec4 cga = texture2D(tDiffuse, vUv); vec4 cb = texture2D(tDiffuse, vUv - offset); gl_FragColor = vec4(cr.r, cga.g, cb.b, cga.a);  }","screen.vert":"varying vec2 vUv;  void main() {  vUv = uv; gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );  }","vignette.frag":"uniform float offset; uniform float darkness;  uniform sampler2D tDiffuse;  varying vec2 vUv;  void main() {   vec4 texel = texture2D( tDiffuse, vUv ); vec2 uv = ( vUv - vec2( 0.5 ) ) * vec2( offset ); gl_FragColor = vec4( mix( texel.rgb, vec3( 1.0 - darkness ), dot( uv, uv ) ), texel.a );    }"}